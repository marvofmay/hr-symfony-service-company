name: Symfony CI

on:
  push:
    branches:
      - "master"
      - "feature/**"
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest

    env:
      APP_ENV: dev
      DATABASE_URL: "mysql://root:root_password@service-company-db:3306/service_company?serverVersion=8.0&charset=utf8mb4"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start containers
        run: docker compose up -d --build

      - name: Wait for MySQL to be healthy
        run: |
          docker compose exec -T service-company-db \
            bash -c 'until mysqladmin ping -h localhost --silent; do sleep 1; done'

      - name: Install dependencies
        run: docker compose exec -T service-company composer install

      - name: Run migrations on main DB (dev DB)
        run: docker compose exec -T service-company php bin/console doctrine:migrations:migrate --no-interaction --env=dev

      - name: Initialize system data (dev DB)
        run: |
          docker compose exec -T service-company php bin/console app:initialize-system-default-data --env=dev
          docker compose exec -T service-company php bin/console app:initialize-system-fake-data --env=dev

      - name: Create test DB
        run: docker compose exec -T service-company php bin/console doctrine:database:create --env=test

      - name: Debug test database users
        run: |
          docker compose exec -T service-company \
            php -r '
              require "vendor/autoload.php";
              $kernel = new \App\Kernel("test", true);
              $kernel->boot();
              $container = $kernel->getContainer();
              $em = $container->get(\Doctrine\ORM\EntityManagerInterface::class);
              $users = $em->getRepository(\App\Module\Company\Domain\Entity\User::class)->findAll();
              foreach ($users as $u) echo $u->getEmail()."\n";
            '

      - name: Run migrations on test database
        run: docker compose exec -T service-company php bin/console doctrine:migrations:migrate --env=test --no-interaction

      - name: Run PHPUnit tests (test DB)
        run: docker compose exec -T service-company php bin/phpunit


